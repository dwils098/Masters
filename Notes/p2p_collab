Collaborative Applications over peer-to-peer systems - Challenges and Solutions (2013)

Defn.: Collaborative P2P systems is a P2P system that aggregates a group(s) of
diverse resources to accomplish a greater task. Such collaboration involving
diverse and application specific resources and dynamic QoS goals stress the
current P2P architectures.

Motivation of this paper: This paper attempts to formalize the P2P resource
collaboration problem and reviews the current solutions. In order to provide a
objective comparison framework they propose different Key Phases in resource
collaboration.

Key Phases:
  (1) Advertise: Each node advertises its resources and their capabilities using
  one or more Resource Specification (RS). A Resource is characterized by a set
  attributes A and a typical RS would be:
                RS = (a_1 = v_1; a_2 = v_2; ...; a_i = v_i)
    where a_x has a value v_x that belongs to a given domain D, where D is typically
    bounded and may represent continuous/discrete value or a category name.

  (2) Discover: Nodes may send probing messages to proactively discover and build
  a local repository of useful RSs, particularly if the specifications are
  unspecified. It can be used to speed up queries and/or to keep track of inter-
  resource relationship such as trust, bandwidth and latency.

  (3) Select: Select a group(s) of resources that satisfies the given application
  requirements. Application requirements are typically specified using queries
  that list one or more attributes and range of attribute values.
                Q = (Resources = m, a_1:[l_1,u_1], a_2:[l_2,u_2], ...)
    where m represents the number of requested resources, l_i is the lower bound
    and u_i is the upper bound w.r.t. requested attribute a_i.

  (4) Match: Not all combination of resources satisfying a resource query may be
  suitable or capable of working together. It is important to take into account
  how two resources relate and interact with each other, to ensure that they can
  satisfy the resource and application constraints. This can be expressed in the
  query by adding requirements w.r.t. to intergroup relationships.

  (5) Bind: Once a subset of resources that match the application requirements
  are identified, it is necessary to ensure that the selected resources are
  available for use. Due to churn or failures, the resources found may not be
  available by the time the application is ready to utilize them. The same
  resource may also be under consideration by other applications. Hence, a
  binding between the resources and the applications needs to be established.

  (6) Use: Utilize the best subset of available resources that satisfy application
  requirements and constraints to carry out the application tasks for which
  resources were acquired. Usage and interaction patterns are application dependent.

  (7) Release: Release resources when application demand decreases, the task is
  completed, or binding expires, whichever occurs first. Resource release patterns
  are also application dependent. Application may release a resource completely,
  (terminating the connection), or reduce its resource usage to allow collaboration
  with other apps.

Candidate Solution Requirements:
  - Should efficiently advertise all the resources together with their current
  state;
  - Discover potentially useful resources;
  - Select resources that satisfy application requirements;
  - Match according to application and resource constraints;
  - Bind resources and applications to ensure QoS guarantees;
  - Need to be adaptive, Fault-Tolerant, robust, and should satisfy multiple
  aspects of scalability: - query resolution latency,
                          - number of messages,
                          - size of resource index,
                          - size of routing tables,
                          - number of attributes.
  - Incentives, trust, privacy and security as to be part of the phases.
  - Implementations of these phases is structure dependent.

State of the Art: P2P Architectures can be categorized as structured and unstructured
overlays.

They draw the differences between those two categories according to a characterization
of the requirements.

==================================================================================
Unstructured P2P:
==================================================================================
  - Overlay construction => High flexibility
  - Resources => Indexed locally (typically)
  - Query Messages => Broadcast or random walk
  - Content Location => Best effort
  - Performance => Unpredictable
  - Object Types => Mutable, with many complex attributes
  - Overhead of Overlay Maintenance => Relatively Low
  - Peer Churn & Failure => Supports High Failure rates.
  - Applicable Environments => Small-scale or highly dynamic environments with
                               (im)mutable objects (e.g.: mobile P2P).
==================================================================================
Structured P2P:
==================================================================================
  - Overlay construction => Low flexibility
  - Resources => Indexed remotely in a DHT.
  - Query Messages => Unicast
  - Content Location => Guaranteed
  - Performance => Predictable bounds
  - Object Types => Immutable, with few simple attributes
  - Overhead of Overlay Maintenance => Moderate
  - Peer Churn & Failure => Supports Moderate Failure rates.
  - Applicable Environments => Large-scale and relatively stable environments with
                               (im)mutable objects (e.g.: desktop file sharing).
